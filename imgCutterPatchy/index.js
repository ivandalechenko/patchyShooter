const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

// === –ù–ê–°–¢–†–û–ô–ö–ò ===
const inputDir = './images';
const outputDir = './cropped';
const outputWidth = 800;             // —à–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
const webpQuality = 80;              // –∫–∞—á–µ—Å—Ç–≤–æ webp (0‚Äì100)
const cropPercent = {
    left: 0.5,
    top: 0.2,
    bottom: 0.2,
    right: 0.1
};
const outputMode = 1;                // 0 = —Ç–æ–ª—å–∫–æ —Å–ø—Ä–∞–π—Ç, 1 = —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏, 2 = –≤—Å—ë
const framesPerRow = 20;             // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
// ==================

if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir);

const files = fs.readdirSync(inputDir)
    .filter(f => /\.(png|jpe?g|webp)$/i.test(f))
    .sort((a, b) => {
        const getNumber = name => parseInt(name.replace(/\D/g, '')) || 0;
        return getNumber(a) - getNumber(b);
    });

(async () => {
    const buffers = [];
    let frameHeight = 0;

    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const inputPath = path.join(inputDir, file);
        console.log(inputPath);

        const metadata = await sharp(inputPath).metadata();
        const left = Math.floor(metadata.width * cropPercent.left);
        const top = Math.floor(metadata.height * cropPercent.top);
        const cropWidth = Math.floor(metadata.width * (1 - cropPercent.left - cropPercent.right));
        const cropHeight = Math.floor(metadata.height * (1 - cropPercent.top - cropPercent.bottom));

        const image = sharp(inputPath)
            .extract({ left, top, width: cropWidth, height: cropHeight })
            .resize({ width: outputWidth })
            .webp({ quality: webpQuality });

        const buffer = await image.toBuffer();
        buffers.push(buffer);

        if (frameHeight === 0) {
            const resizedMeta = await sharp(buffer).metadata();
            frameHeight = resizedMeta.height;
            console.log(`üëâ –í—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞ –ø—Ä–∏ —à–∏—Ä–∏–Ω–µ ${outputWidth}px: ${frameHeight}px`);
        }

        if (outputMode === 1 || outputMode === 2) {
            const outputPath = path.join(outputDir, `${i}.webp`);
            await sharp(buffer).toFile(outputPath);
            console.log(`‚úÖ Saved frame: ${outputPath}`);
        }
    }

    if (outputMode === 0 || outputMode === 2) {
        const totalFrames = buffers.length;
        const rows = Math.ceil(totalFrames / framesPerRow);
        const spriteWidth = outputWidth * framesPerRow;
        const spriteHeight = frameHeight * rows;

        console.log(`üß± –°–ø—Ä–∞–π—Ç—à–∏—Ç: ${framesPerRow} –∫–∞–¥—Ä–æ–≤ –≤ —Ä—è–¥, –∏—Ç–æ–≥–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞: ${spriteWidth}px, –≤—ã—Å–æ—Ç–∞: ${spriteHeight}px`);

        const sprite = sharp({
            create: {
                width: spriteWidth,
                height: spriteHeight,
                channels: 4,
                background: { r: 0, g: 0, b: 0, alpha: 0 }
            }
        });

        const composites = buffers.map((buf, i) => ({
            input: buf,
            left: (i % framesPerRow) * outputWidth,
            top: Math.floor(i / framesPerRow) * frameHeight
        }));

        await sprite.composite(composites).webp({ quality: webpQuality }).toFile(path.join(outputDir, 'sprite.webp'));
        console.log(`üéâ –°–ø—Ä–∞–π—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${path.join(outputDir, 'sprite.webp')}`);
    }
})();
